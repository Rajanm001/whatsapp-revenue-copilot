{
  "meta": {
    "instanceId": "whatsapp-copilot-instance"
  },
  "name": "WhatsApp Revenue Copilot - Main Router",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "whatsapp-webhook",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "WhatsApp Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "whatsapp-inbound"
    },
    {
      "parameters": {
        "jsCode": "// Extract and process WhatsApp message\nconst items = $input.all();\nconst firstItem = items[0];\nconst body = firstItem.json.body || firstItem.json;\n\n// Handle different WhatsApp webhook structures\nlet message = {};\nif (body.entry && body.entry[0] && body.entry[0].changes) {\n  const change = body.entry[0].changes[0];\n  if (change.value && change.value.messages && change.value.messages[0]) {\n    const msg = change.value.messages[0];\n    message = {\n      from: msg.from,\n      text: msg.text ? msg.text.body : '',\n      type: msg.type || 'text',\n      timestamp: msg.timestamp,\n      id: msg.id\n    };\n    \n    // Check for attachments/media\n    if (msg.type === 'document' || msg.type === 'image') {\n      message.hasAttachments = true;\n      message.media = msg[msg.type];\n    } else {\n      message.hasAttachments = false;\n    }\n  }\n} else {\n  // Fallback for direct message format\n  message = {\n    from: body.from || 'unknown',\n    text: body.text || body.message || '',\n    hasAttachments: !!(body.attachments && body.attachments.length > 0),\n    type: 'text'\n  };\n}\n\nreturn [{\n  json: {\n    messageData: message,\n    needsClassification: !message.hasAttachments,\n    userId: message.from,\n    messageText: message.text,\n    hasAttachments: message.hasAttachments\n  }\n}];"
      },
      "id": "message-processor",
      "name": "Process Message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.hasAttachments}}",
              "value2": true
            }
          ]
        }
      },
      "id": "attachment-check",
      "name": "Has Attachments?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://agenta:8001/agentA/ingest",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "media",
              "value": "={{$json.messageData.media}}"
            },
            {
              "name": "userId",
              "value": "={{$json.userId}}"
            }
          ]
        },
        "options": {}
      },
      "id": "file-ingestion",
      "name": "Process File Upload",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [900, 180]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://shared:8000/classify",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "message",
              "value": "={{$json.messageText}}"
            },
            {
              "name": "userId",
              "value": "={{$json.userId}}"
            }
          ]
        },
        "options": {}
      },
      "id": "intent-classification",
      "name": "Classify Intent",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [900, 420]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.intent}}",
              "value2": "knowledge_qa"
            }
          ]
        }
      },
      "id": "route-decision",
      "name": "Route to Agent",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://agenta:8001/agentA/ask",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "userId",
              "value": "={{$json.userId}}"
            },
            {
              "name": "text",
              "value": "={{$json.messageText}}"
            }
          ]
        },
        "options": {}
      },
      "id": "agent-a-call",
      "name": "Call Knowledge Agent",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1340, 180]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.intent}}",
              "value2": "lead_capture"
            },
            {
              "value1": "={{$json.intent}}",
              "value2": "proposal_request"
            },
            {
              "value1": "={{$json.intent}}",
              "value2": "next_step"
            },
            {
              "value1": "={{$json.intent}}",
              "value2": "status_update"
            }
          ],
          "combineOperation": "any"
        }
      },
      "id": "dealflow-check",
      "name": "Check Dealflow Intent",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1340, 420]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{$json.intent === 'lead_capture' ? 'http://agentb:8002/agentB/newlead' : $json.intent === 'proposal_request' ? 'http://agentb:8002/agentB/proposal-copy' : $json.intent === 'next_step' ? 'http://agentb:8002/agentB/nextstep-parse' : 'http://agentb:8002/agentB/status-classify'}}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "raw",
              "value": "={{$json.messageText}}"
            },
            {
              "name": "userId",
              "value": "={{$json.userId}}"
            }
          ]
        },
        "options": {}
      },
      "id": "agent-b-call",
      "name": "Call Dealflow Agent",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1560, 420]
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": "={{$env.CONVERSATIONS_SHEET_ID}}",
        "sheetName": "Conversations",
        "columns": {
          "mappingMode": "defineBelow",
          "values": {
            "Timestamp": "={{new Date().toISOString()}}",
            "User": "={{$json.userId}}",
            "Intent": "={{$json.intent || 'file_upload'}}",
            "Input": "={{$json.messageText}}",
            "Output": "={{$json.answer || $json.response || 'File processed'}}",
            "Confidence": "={{$json.confidence || 0.95}}",
            "Citations": "={{$json.citations ? JSON.stringify($json.citations) : ''}}",
            "Error": "={{$json.error || ''}}"
          }
        },
        "options": {}
      },
      "id": "log-conversation",
      "name": "Log Conversation",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [1780, 300],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "google-sheets-oauth",
          "name": "Google Sheets OAuth2"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": "={{$env.CRM_SHEET_ID}}",
        "sheetName": "CRM",
        "columns": {
          "mappingMode": "defineBelow",
          "values": {
            "Timestamp": "={{new Date().toISOString()}}",
            "LeadId": "={{$json.leadId || ''}}",
            "Name": "={{$json.name || ''}}",
            "Company": "={{$json.company || ''}}",
            "Intent": "={{$json.intent}}",
            "Budget": "={{$json.budget || ''}}",
            "Stage": "={{$json.stage || 'New'}}",
            "Owner": "WhatsApp Bot",
            "NextStepDate": "={{$json.nextStepDate || ''}}",
            "Links": "={{$json.proposalLink || ''}}",
            "Notes": "={{$json.notes || $json.messageText}}"
          }
        },
        "options": {}
      },
      "id": "update-crm",
      "name": "Update CRM",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [1780, 500],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "google-sheets-oauth",
          "name": "Google Sheets OAuth2"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{$env.WHATSAPP_API_URL}}/{{$env.WHATSAPP_PHONE_NUMBER_ID}}/messages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{$env.WHATSAPP_ACCESS_TOKEN}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "messaging_product",
              "value": "whatsapp"
            },
            {
              "name": "to",
              "value": "={{$json.userId}}"
            },
            {
              "name": "type",
              "value": "text"
            },
            {
              "name": "text",
              "value": "={{JSON.stringify({body: $json.answer || $json.response || $json.title || 'Message processed successfully!'})}}",
              "type": "json"
            }
          ]
        },
        "options": {}
      },
      "id": "whatsapp-response",
      "name": "Send WhatsApp Response",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [2000, 300]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "OK"
      },
      "id": "webhook-response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2220, 300]
    }
  ],
  "connections": {
    "WhatsApp Webhook": {
      "main": [
        [
          {
            "node": "Process Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Message": {
      "main": [
        [
          {
            "node": "Has Attachments?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Attachments?": {
      "main": [
        [
          {
            "node": "Process File Upload",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Classify Intent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process File Upload": {
      "main": [
        [
          {
            "node": "Log Conversation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Classify Intent": {
      "main": [
        [
          {
            "node": "Route to Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route to Agent": {
      "main": [
        [
          {
            "node": "Call Knowledge Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check Dealflow Intent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Knowledge Agent": {
      "main": [
        [
          {
            "node": "Log Conversation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Dealflow Intent": {
      "main": [
        [
          {
            "node": "Call Dealflow Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send WhatsApp Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Dealflow Agent": {
      "main": [
        [
          {
            "node": "Update CRM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Conversation": {
      "main": [
        [
          {
            "node": "Send WhatsApp Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update CRM": {
      "main": [
        [
          {
            "node": "Send WhatsApp Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send WhatsApp Response": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-09-14T00:00:00.000Z",
  "versionId": "1"
}
